<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Thinking - Articles</title>
    <description>学习的一些记录</description>
    <link>
    http://localhost:4000</link>
    
      
      <item>
        <title>Srpocket 如何加入gem静态文件路径</title>
        
          <description>&lt;p&gt;平时候我们如果用Gem引进的方式去加载前端的插件，一般我们都是bundle了gem之后就直接去require对应的文件了。在引的时候一直有个疑问，Rails是如何加载这些插件进来的？它是怎么知道那个文件的位置的？其中用了什么手段去做的，一直比较好奇，现在有空总结了一下。&lt;/p&gt;

</description>
        
        <pubDate>Sat, 09 Mar 2019 10:18:00 +0000</pubDate>
        <link>
        http://localhost:4000/ruby-sprocket</link>
        <guid isPermaLink="true">http://localhost:4000/ruby-sprocket</guid>
      </item>
      
    
      
      <item>
        <title>Ruby Middleware</title>
        
          <description>&lt;p&gt;&lt;a href=&quot;https://rack.github.io/&quot;&gt;Rack官网&lt;/a&gt;对于Rack的介绍比较简单，只是介绍了Rack的作用和基本的使用。不过也可能因为不复杂，所以才用简单的几段话介绍了Rack。虽然我们不用了解middleware的调用原理也可以开发出能使用的middleware，但是总有点不知所以然的感觉，所以抽空总结了下Rack中middleware的调用原理。&lt;/p&gt;

</description>
        
        <pubDate>Sat, 09 Mar 2019 10:18:00 +0000</pubDate>
        <link>
        http://localhost:4000/ruby-rack</link>
        <guid isPermaLink="true">http://localhost:4000/ruby-rack</guid>
      </item>
      
    
      
      <item>
        <title>Ruby Puma 原理解析</title>
        
          <description>&lt;p&gt;App服务器一直都是在后台默默的接受，处理那些乱七八糟的请求。一般开发很少会接触到这些方面的使用，除非是为了优化服务器才会去配置Puma。使用的时候也只是大概了解Puma接受的一些请求转化到Rails App所做的一些工作。但是对于Puma中的请求转化和处理一直比较迷惑，现在有时间，看了一下源码，学习总结了下Puma的实现过程，原理和之前产生的一些疑问。其中单进程模式介绍的比价详细，这种模式是集群模式的特例，只不过集群模式创建了多几个woker而已，其中对应请求的处理其实是一样的。下面的Puma版本是3.12.0。&lt;/p&gt;

</description>
        
        <pubDate>Sat, 09 Mar 2019 10:18:00 +0000</pubDate>
        <link>
        http://localhost:4000/ruby-puma</link>
        <guid isPermaLink="true">http://localhost:4000/ruby-puma</guid>
      </item>
      
    
      
      <item>
        <title>Ruby Sidekiq的使用</title>
        
          <description>&lt;p&gt;Sidekiq 作为后台的一种异步定时任务队列处理服务，是通过什么方式去处理队列任务的，和Redis是怎么配合的？涉及到的一些技术原理一直比较模糊，有空总结了一下查看Sidekiq源码学到的东西。&lt;/p&gt;

</description>
        
        <pubDate>Sun, 03 Mar 2019 10:18:00 +0000</pubDate>
        <link>
        http://localhost:4000/ruby-sidekiq</link>
        <guid isPermaLink="true">http://localhost:4000/ruby-sidekiq</guid>
      </item>
      
    
      
      <item>
        <title>Ruby TSort 在Rails中的使用</title>
        
          <description>&lt;p&gt;平时候接触到的只是业务逻辑层面的使用，很少触及到算法方面的应用，在看rails应用的启动过程时，偶然间发现的一个算法应用，然后查看了相关的资料，总结下TSort算法在Rails中的应用。&lt;/p&gt;

</description>
        
        <pubDate>Thu, 14 Feb 2019 10:18:00 +0000</pubDate>
        <link>
        http://localhost:4000/ruby-tsort-usage</link>
        <guid isPermaLink="true">http://localhost:4000/ruby-tsort-usage</guid>
      </item>
      
    
      
      <item>
        <title>Rails中的一些辅助技巧</title>
        
          <description>&lt;p&gt;Rails helper作为页面标签的辅助生成器，其中加入了很多奇技淫巧，有时让人觉得像是个黑魔法，像有些浏览器不支持的action，为安全生成的校验token那些都是helper中生成的。很大程度的方便了我们的开发，之前也只是停留在使用的阶段，没有进一步探索过，现在有空总结如下。&lt;/p&gt;

</description>
        
        <pubDate>Fri, 15 Jun 2018 10:18:00 +0000</pubDate>
        <link>
        http://localhost:4000/rails-helper</link>
        <guid isPermaLink="true">http://localhost:4000/rails-helper</guid>
      </item>
      
    
  </channel>
</rss>
