<?xml version="1.0" encoding="UTF-8" ?>

<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
   
      <title>mrzou.github.io/jasper/</title>
   
   <link>http://localhost:4000</link>
   <description>学习的一些记录</description>
   <language>zh-cn</language>
   <managingEditor> </managingEditor>
   <atom:link href="rss" rel="self" type="application/rss+xml" />
   
	<item>
	  <title>Cancancan 的实现原理</title>
	  <link>//ruby-cancancan</link>
	  <author></author>
	  <pubDate>2019-03-30T18:18:00+08:00</pubDate>
	  <guid>//ruby-cancancan</guid>
	  <description><![CDATA[
	     <p>用了几年的<a href="https://github.com/CanCanCommunity/cancancan">cancancan</a>，说起来有些尴尬。明明是也是用基本的代码写出来的，可是却不知道是怎么搭建起来的。用的时候去查看文档，每次都要使用在controller中能找到current_user方法，需要定义一个初始的Ability Model，然后定义各种各样的can方法，然后在每个需要权限的地方用can?去判断，更具有魔力的是controller方法中直接添加 <code class="highlighter-rouge">load_and_authorize_resource</code> 就可以判断权限了，不需要做其它的判断，各种各样的黑魔法。每每想起这些都觉得有点慌，使用的时候只要功能运行成功了就私自窃喜，满满的成就感，谁知道那只是大脑的一种欺骗。其实只是用对了，对于其中是怎么发生的，始终不知所以然。由于现在开发的系统对cancancan依赖的比较大，总结一些其中实现的原理。</p>

<h4 id="cancancan实现的原理">Cancancan实现的原理</h4>

<p>简单的说，主要的逻辑线就是通过在<code class="highlighter-rouge">ability.rb</code>那个文件中声明can方法的权限，在gem中会把那个方法声明的操作和资源(就是model)做一个存储，变成一个虚拟模型(下面详细分析)。然后在controller的<code class="highlighter-rouge">authorize!</code>和view的<code class="highlighter-rouge">can?</code>方法的调用时，就用那个模型去做判断就可以了。</p>

<p>首先为ActionController::Base类定义一些基本的方法，继承了这个类的controller都会定义好这些方法。其中比较常用的是<code class="highlighter-rouge">authorize!</code>, <code class="highlighter-rouge">load_and_authorize_resource</code>(这个方法在每个action执行之前执行<code class="highlighter-rouge">load_resource</code>和<code class="highlighter-rouge">authorize_resource</code>方法)，同时会声明:can?, :cannot?, :current_ability方法为helper方法，这样在view中就可以使用这三个方法了。下面是对controller做方法扩展。</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>if defined? ActionController::Base
  ActionController::Base.class_eval do
    include CanCan::ControllerAdditions
  end
end
</code></pre></div></div>

<p>在Gem里面定义了current_ability方法，把current_user作为参数使用，所以需要在应用中已经定义了这个方法，要不然就会报没有这个方法定义。同时如果应用中表示当前的用户如果不是current_user，而是其它如<code class="highlighter-rouge">current_manager</code>之类的，就需要在应用的controller中定义一个current_ability的方法去覆盖这个方法。很多的权限判断都是基于这个方法去调用的。</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>def current_ability
  @current_ability ||= ::Ability.new(current_manager)
end
</code></pre></div></div>

<p>那你的应用是通过什么方式和Gem里面的那些方法发生关联的呢？其实主要的关联是上面方法中new出来的那个Ability类，这个类是一个基本的model，执行 <code class="highlighter-rouge">rails g cancan:ability</code> 的时候会自动为我们创建一个初始化的model，initialize方法中去把定义的权限转化为虚拟的模型，然后在后面需要使用时去判断使用。当在initialize方法中定义一个权限 <code class="highlighter-rouge">can :edit, Post</code>，这时会调用到 <code class="highlighter-rouge">include CanCan::Ability</code> 中的can方法，这个方法的定义是通过在model Ability中include添加进去的。</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code># ~/.rvm/gems/ruby-2.4.3/gems/cancancan-2.0.0/lib/cancan/ability.rb
def can(action = nil, subject = nil, conditions = nil, &amp;block)
  add_rule(Rule.new(true, action, subject, conditions, block))
end

def add_rule(rule)
  rules &lt;&lt; rule
  add_rule_to_index(rule, rules.size - 1)
end
</code></pre></div></div>

<p>can方法中初始化的Rule实例表示的是一个can方法调用的一个规则，所有的规则都会添加到@rules实例变量中去。其中Rule类中定义的方法<code class="highlighter-rouge">matches_conditions</code>是后面需要用来判断找到的Rule是否符合权限的关键方法。而<code class="highlighter-rouge">add_rule_to_index</code>方法是用来存储subjects(can方法中定义的资源，即model)在Rules中定义的位置数据的格式为{model: [1,2,3]}这种。这种数据结构是为了比较容易通过model去找rules中对应的rule。在Ability的initizlie中定义的can方法到这里就执行完了。其实这个过程就是通过can方法定义了一组的rules，然后把model作为key，rule在rules中的位置作为values的存储结构模型，在需要判断权限的地方判断一下就好了，仅此而已。。。。。</p>

<p>接下来就到了在view中调用can?和在controller中调用authorize!的权限判断了，其实controller中authorize!的判断也是通过调用Gem中定义好的can?方法去执行判断的，判断到为false时就执行<code class="highlighter-rouge">raise AccessDenied</code> 所以下面只分析can?方法了。</p>

<p>调用can?方法时是通过调用 <code class="highlighter-rouge">current_ability</code>(即CanCan::Ability)中的can?方法去做判断的。</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code># ~/.rvm/gems/ruby-2.4.3/gems/cancancan-2.0.0/lib/cancan/ability.rb
def can?(action, subject, *extra_args)
  match = extract_subjects(subject).lazy.map do |a_subject|
    relevant_rules_for_match(action, a_subject).detect do |rule|
      rule.matches_conditions?(action, a_subject, extra_args)
    end
  end.reject(&amp;:nil?).first
  match ? match.base_behavior : false
end

def relevant_rules(action, subject)
  return [] unless @rules
  relevant = possible_relevant_rules(subject).select do |rule|
    rule.expanded_actions = expand_actions(rule.actions)
    rule.relevant? action, subject
  end
  relevant.reverse!.uniq!
  optimize_order! relevant
  relevant
end

def possible_relevant_rules(subject)
  if subject.is_a?(Hash)
    rules
  else
    positions = @rules_index.values_at(subject, *alternative_subjects(subject))
    positions.flatten!.sort!
    positions.map { |i| @rules[i] }
  end
end

</code></pre></div></div>

<p>上面是主要的调用栈，relevant_rules方法是为了判断找出的rule是否符合在资源上定义的action。调用栈中的<code class="highlighter-rouge">possible_relevant_rules</code>是为了找到这个subject相关的rules，因为subject不仅仅是本身，也有可能是<a href="https://api.rubyonrails.org/classes/ActiveRecord/Inheritance.html">STI</a>，所以通过<code class="highlighter-rouge">subject.ancestors</code>找出所有相关的祖父类。然后返回相应的rules。通过 <code class="highlighter-rouge">rule.matches_conditions?(action, a_subject, extra_args)</code>去判断是否满足定义的这种情况，默认的Ability的model中can方法没有condition或者块时，一般会愉快的返回true的，但是如果有condition和block时就会转去执行相应的判断了。</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>def matches_conditions?(action, subject, extra_args)
  if @match_all # 这种情况是can直接用block作为参数，没有action和subject的情况
    call_block_with_all(action, subject, extra_args)
  elsif @block &amp;&amp; !subject_class?(subject)
    @block.call(subject, *extra_args)
  elsif @conditions.is_a?(Hash) &amp;&amp; subject.class == Hash
    nested_subject_matches_conditions?(subject)
  elsif @conditions.is_a?(Hash) &amp;&amp; !subject_class?(subject)
    matches_conditions_hash?(subject)
  else
    # Don't stop at "cannot" definitions when there are conditions.
    conditions_empty? ? true : @base_behavior
  end
end
</code></pre></div></div>

<p>上面的判断 <code class="highlighter-rouge">@block &amp;&amp; !subject_class?(subject)</code>这里可能要注意一下，这里和下面的误用有关联。为什么需要判断subject是否是class呢？这个和要调用的块有关，由于块中需要传入对应的实例来判断是否满足情况。如果subject是类，则不会进行该判断。所以如果定义权限时，can方法接了block，这里会有两种方式做判断，方式一时<code class="highlighter-rouge">can?(:action, Model)</code>，方式二是 <code class="highlighter-rouge">can?(action, model)</code> 一个model是类，一个是实例。如果是类，则不会执行后面的块，只有资源是实例时才会执行block的判断。</p>

<h4 id="controller中的-load_and_authorize_resource-方法做了什么">Controller中的 <code class="highlighter-rouge">load_and_authorize_resource</code> 方法做了什么</h4>

<p>调用这个方法时，其实是在添加了一个<code class="highlighter-rouge">before_action</code>的声明。在这里就相当于声明了</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>before_action :load_and_authorize_resource
</code></pre></div></div>

<p>而load_and_authorize_resource方法分别调用<code class="highlighter-rouge">load_resource</code>和<code class="highlighter-rouge">authorize_resource</code>方法。和在controller中分别声明那两个方法意思一样。</p>

<p>load_resource方法是通过controller的名字找到对应的model名，把model名设置为实例变量，这个实例变量供后面<code class="highlighter-rouge">authorize_resource</code>调用时使用。</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code># ~/.rvm/gems/ruby-2.4.3/gems/cancancan-2.0.0/lib/cancan/controller_resource.rb
def load_resource
  return if skip?(:load)
  if load_instance? # 根据情况决定是否把资源load出来
    self.resource_instance ||= load_resource_instance
  elsif load_collection?
    self.collection_instance ||= load_collection
  end
end

def load_instance?
  # parent的意思是由于有些资源是嵌套的，比如/users/:user_id/products/3这种形式，parent就是user了，则需要用
  # load_resource :user
  # load_resource :product, through: :user
  parent? ||
  # 是否是member_action，则根据是否是new，create，或者params中有id的那种情况(update, destroy)等其它情况
  member_action?
end

def load_collection # accessible_by方法会根据can方法中设置的condition用where自动作为condition去查询
  resource_base.accessible_by(current_ability, authorization_action)
end
</code></pre></div></div>

<p>这样上面就是对load_resource的理解了，其实简单点说就是先帮你把各种资源假设查找出来，然后在<code class="highlighter-rouge">authorize_resource</code>的时候用这个去判断权限。不过有时候我们用权限的方式不太对，但是没有检查到。比如说设置了如下的权限:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>can :edit, User do |resource|
  resource.normal?
end
</code></pre></div></div>

<p>然后在view里用的却用<code class="highlighter-rouge">can?(:edit, User)</code>这种验证方法，这时候其实块里面的权限没有检查到。
还有一种情况就是controller里加载的resource和model没有对应，然后直接用 <code class="highlighter-rouge">load_and_authorize_resource</code>方法去验证权限了，这样也是不对的。这时候就需要添加一些name和class的参数去把这些和model名字对应起来了。</p>

<h4 id="总结">总结</h4>

<p>总的来说，权限其实是实例化了一个Ability，然后在其中保存rules权限匹配规则。在需要判断的时候用can调用，利用参数action和其中的资源去匹配，看其中有没有对应的规则可以匹配去做权限验证。看文档能解决使用问题，但是要精确的去使用还是要看下里面的实现。</p>


	  ]]></description>
	</item>

	<item>
	  <title>Ruby Sidekiq的使用</title>
	  <link>//ruby-sidekiq</link>
	  <author></author>
	  <pubDate>2019-03-03T18:18:00+08:00</pubDate>
	  <guid>//ruby-sidekiq</guid>
	  <description><![CDATA[
	     <p>Sidekiq 作为后台的一种异步定时任务队列处理服务，是通过什么方式去处理队列任务的，和Redis是怎么配合的？涉及到的一些技术原理一直比较模糊，有空总结了一下查看Sidekiq源码学到的东西。</p>

<h3 id="sidekiq启动时做了什么事情">Sidekiq启动时做了什么事情？</h3>
<ol>
  <li>require Rails APP上面的environment.rb里面的东西，可以让sidekiq中有rails中的执行环境。</li>
  <li>新建默认的concurrency的数目，每个对应一个线程。</li>
  <li>启动28个线程，一个是主线程，一个健康检查线程，一个scheduler线程，25个processor线程</li>
</ol>

<h3 id="什么时候去执行任务">什么时候去执行任务？</h3>

<p>在manager start的时候去start processor，那些线程会有个循环在那里不间断的去队列里取任务出来执行。</p>

<h3 id="从任务进入redis到任务执行都经过了哪些步骤">从任务进入redis到任务执行都经过了哪些步骤？</h3>

<ol>
  <li>开始时都是生成一些参数，其中参数会添加一些字段上去，有class, queue, jid, created_at等字段。</li>
  <li>调用栈会调用到atomic_push这个方法，这个方法会区分开字段中是否有’at’那个字段，如果有那个字段，则把payloads批量的任务按[at, hash_json] 的格式加入到scheduled队列中去。否则的话，就把队列的名字加入到queues队列中去，同时把类参数那些东西加入到 <code class="highlighter-rouge">queue:#{q}"</code> 这个名字的队列中去。</li>
  <li>有定时和立即两种情况，过段时间执行和立即执行，过段时间执行是按队列schedule权重去排序加入的，而立即执行时把队列加入到queues这个队列中，然后任务加入到 “queue:#{q}”中</li>
  <li>至此任务加入队列就比较清晰了。</li>
</ol>

<h3 id="重试队列和定时队列是怎么样的">重试队列和定时队列是怎么样的？</h3>

<p>在任务加入队列之前会先判断任务执行的时间，如果是调用perform_async方法的就是立即执行任务，任务的队列会被安排在queues队列中，同时队列的hash会被加入到名字加<code class="highlighter-rouge">queue:#{q}</code> 的队列中去，如果是调用<code class="highlighter-rouge">perform_in</code> 或者 <code class="highlighter-rouge">perform_at</code> 的，则会通过时间戳的方式去判断是否需要在item中加入 <code class="highlighter-rouge">at</code> 字段，如果是要立即执行就不需要加，如果是后面执行的，则会在把item先加入到scheduled队列中去。</p>

<h3 id="scheduled队列中的任务什么时候加入到具体队列中去让线程执行">scheduled队列中的任务什么时候加入到具体队列中去让线程执行？</h3>
<p>这部分就是poller的工作了。poller单独开了个线程，不断的进行循环，遍历retry和schedule两个队列，这个类的工作是循环，然后取出两个队列中可以执行的任务，把那个任务加入到执行队列中，然后那25个线程遍历后就会把那些任务取出来执行，至此从任务的进入到安排执行的整个过程就可以走通了</p>

<h3 id="重试的原理">重试的原理</h3>

<p>在processor执行dispatch方法的block中拦截错误，看是什么情况的错误，如果重试的开关没有关闭而且可以重试就吧任务加入到retry队列中去。</p>

<h3 id="为什么执行立即执行任务和有时间点执行的任务加入队列的方式不一样">为什么执行立即执行任务和有时间点执行的任务加入队列的方式不一样？</h3>

<p>当时定时任务时，就按照时间的顺序排序加入到集合当中，如果是立即任务，则立即加入到任务队列中去，而这时候调用的sadd方法其实是在队列<code class="highlighter-rouge">queues</code> 加入不重复的元素。所有会有两种不一样的处理方式，而把执行队列加入到 <code class="highlighter-rouge">queues</code> 中是为了给api使用，入web界面。</p>

<h3 id="定时任务执行的原理">定时任务执行的原理</h3>

<p>其实是把sidekiq的laucher类的加入队列的方法给重写了，另外起了一个poller实例去循环监控定时任务队列的任务，如果有可以执行的，就加入到队列中去。</p>

<h3 id="activejob和sidekiq">ActiveJob和sidekiq</h3>
<ul>
  <li>
    <p>通过求得adapter，然后：</p>

    <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>def enqueue(job) #:nodoc:
  # Sidekiq::Client does not support symbols as keys
  job.provider_job_id = Sidekiq::Client.push \
    "class"   =&gt; JobWrapper,
    "wrapped" =&gt; job.class.to_s,
    "queue"   =&gt; job.queue_name,
    "args"    =&gt; [ job.serialize ]
end

</code></pre></div>    </div>

    <p>加入到队列中去，连接起了activejob和sidekiq</p>
  </li>
</ul>

<p>activejob是sidekiq和requeue等其它后台服务的中间适配器，异步任务的参数可以用object是在activejob中用<a href="https://github.com/rails/globalid">globalid</a>来处理过的，在从队列中取出来后再反序列化处理把object拿出来使用就可以了。但是sidekiq中的使用确实通过 <code class="highlighter-rouge">perform_async</code> 和 <code class="highlighter-rouge">perform_in</code> 或 <code class="highlighter-rouge">perform_at</code> 等方法来进行加入队列的，所以这些对参数的处理不一样，如果是通过activejob来处理，则是上面的处理方法，如果是通过sidekiq来出来，却是通过上面的那三中方法来出来的。</p>

<h3 id="总结">总结</h3>

<p>在调用代码是先把任务加入到队列中，这是需要判断任务是哪种类型，如果是立即的，那就直接放入到队列中，如果是定时的，则先把任务放入到scheduled队列中，然后再由poller按时间顺序轮询安排，如果有需要执行的任务就放入队列中去。然后开启的25个workers就会轮询队列中的任务，不间断的取出来执行。到此，整个流程就走通了。</p>

	  ]]></description>
	</item>

	<item>
	  <title>Ruby TSort 在Rails中的使用</title>
	  <link>//ruby-tsort-usage</link>
	  <author></author>
	  <pubDate>2019-02-14T18:18:00+08:00</pubDate>
	  <guid>//ruby-tsort-usage</guid>
	  <description><![CDATA[
	     <p>平时候接触到的只是业务逻辑层面的使用，很少触及到算法方面的应用，在看rails应用的启动过程时，偶然间发现的一个算法应用，然后查看了相关的资料，总结下TSort算法在Rails中的应用。</p>

<h3 id="tsort的理解">TSort的理解</h3>

<p>TSort的意思: TSort是拓扑排序英文的缩写，拓扑排序是有向图按其线性排列的一种算法，有个先后的排序顺序，而且不能有环出现，如果有环出现，则不算是拓扑结构了。一般拓扑结构可以用来表示元素的一些依赖关系的处理，如果事物A需要在事物B之前处理，则是B依赖于A的执行，B要先处理，用箭头表示为 A -&gt; B。</p>

<h3 id="tsort的使用">TSort的使用:</h3>
<ol>
  <li>
    <p><code class="highlighter-rouge">TSort.tsort_each(each_node, each_child)</code> each_node和each_child是两个block，同时这两个block接收在TSort中定义的<a href="#block-source1">block1</a>和<a href="#block-source2">block2</a>作为参数传递进去(block1和block2其实是对应到each_node.call和each_child.call后面的块的)，逐个作用在各个节点和子节点上。意思是让用户自己定义传入进来的节点和子节点是什么。这些节点都作为这两个block的参数使用。</p>
  </li>
  <li>each_node(&amp;block) 定义这个方法是因为在拓扑结构中的点可能是对象，或是数字，或是一些字母类的东西，但是点和点间产生关联需要有关联因子，关联因子可能是一个数字，一个字符串，或是一个object。each_node这个block就是取出关联因子，然后逐个作为参数去调用<a href="#block-source1">block1</a>就可以了。</li>
  <li>
    <p>each_child(&amp;block) 这个方法的目的和each_node差不多，但是这个方法的作用因子是对应的子节点，如下图：
  <img src="assets/images/simple_relation.png" alt="关系图" />
  其中A是作为<a href="#block-source1">block1</a>的参数调用，B和C是作为<a href="#block-source2">block2</a>的参数调用。</p>
  </li>
  <li>第二种用法是让成员的集合去覆写 <code class="highlighter-rouge">tsort_each_node</code> 和 <code class="highlighter-rouge">tsort_each_child</code> 这两个方法，这两个方法的作用和上面的 <code class="highlighter-rouge">each_node</code> he <code class="highlighter-rouge">each_child</code> 的作用一样，只是调用 <code class="highlighter-rouge">tsort_each</code>的对象不一样，这种方式是通过 <code class="highlighter-rouge">include 'tsort'</code> 模块，然后用成员集合去调用 <code class="highlighter-rouge">tsort_each</code> 方法的。</li>
</ol>

<h3 id="使用例子">使用例子：</h3>
<p>如下图的关系，需要按照依赖关系逐个输出节点。
<img src="assets/images/simple_relation1.png" alt="图形关系" />
这个例子中可以用如下关系表示A, B, C, D节点</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>A = B + C
B = C + 2
C = 2
D = B + A + 1
</code></pre></div></div>

<p>要求出这些未知数，应该先求解出这些数的顺序。</p>

<p>这些数可以用两种数据结构表示关系，一个是直接hash，另外一个有可能这些依赖关系只是对象的一个属性而已，这就是为什么需要自定义 <code class="highlighter-rouge">each_node</code> 和 <code class="highlighter-rouge">each_child</code> 的原因。</p>

<ul>
  <li>用hash表示节点关系求解如下:</li>
</ul>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  graph = { A: [:D], B: [:A, :D], C: [:A, :B], D: [] }
  each_node = lambda {|&amp;b| graph.each_key(&amp;b) }
  each_child = lambda { |n, &amp;b| graph[n].each(&amp;b) }

  TSort.tsort_each(each_node, each_child) {|scc|
    p scc
  }
  # puts:
  # :D
  # :A
  # :B
  # :C
</code></pre></div></div>

<ul>
  <li>用对象的关联表示节点关系求解如下:</li>
</ul>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>class NodeObj
  attr_reader :node, :children

  def initialize(node, children)
    @node =node
    @children = children
  end
end

class TSortTest
  include TSort

  def initialize(node_objs)
    @node_objs = node_objs
  end

  def tsort_each_node(&amp;block)
    @node_objs.map(&amp;:node).each(&amp;block)
  end

  def tsort_each_child(node, &amp;block)
    @node_objs.select do |node_obj|
      node_obj.children.include? node
    end.map(&amp;:node).each(&amp;block)
  end
end

node_objs = []
node_objs.push NodeObj.new('C','2')
node_objs.push NodeObj.new('D','B + A + 1')
node_objs.push NodeObj.new('A','B + C')
node_objs.push NodeObj.new('B','C + 2')

tsort_test = TSortTest.new(node_objs)
tsort_test.tsort_each do |node|
  p node
end
# puts:
# :D
# :A
# :B
# :C
</code></pre></div></div>

<p>上面是根据图的不同数据结构的表示方法而产生的两种使用TSort的方式，都是一样的调用，只不过<strong>include ‘tsort’</strong>那种方式是用的直接定义两个方法的方式去用，而 <code class="highlighter-rouge">TSort.tsort_each</code> 是把块作为参数传递进去。在Rails执行初始化的依赖中使用的是后一种方式。</p>

<h3 id="在rails中的应用">在rails中的应用</h3>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code># /Users/Cain/.rvm/gems/ruby-2.5.3/gems/railties-5.2.1.1/lib/rails/initializable.rb

class Collection &lt; Array
  include TSort

  alias :tsort_each_node :each
  def tsort_each_child(initializer, &amp;block)
    select { |i| i.before == initializer.name || i.name == initializer.after }.each(&amp;block)
  end

  def +(other)
    Collection.new(to_a + other.to_a)
  end
end
</code></pre></div></div>

<p>上面定义了一个继承Array的类，这个类里定义了需要覆盖的两个方法，其中 <code class="highlighter-rouge">tsort_each_node</code> 用 Array中的<code class="highlighter-rouge">each</code> 这个方法表示集合中的成员就表示一个节点，而 <code class="highlighter-rouge">tsort_each_child</code> 方法求得的关联孩子节点需要通过其它Raitie中定义的 <code class="highlighter-rouge">initializer</code> before 和 after这两个option去取得联系，从而用那些子节点作为参数在block中执行。</p>

<h3 id="tsort源码解析">TSort源码解析</h3>

<h4 id="tsort使用的基本算法">TSort使用的基本算法</h4>

<p>TSort是基于Tarjan算法来进行排序的，在这里不详细介绍Tarjan排序算法，具体可以参考<a href="http://blog.miskcoo.com/2016/07/tarjan-algorithm-strongly-connected-components">Tarjan算法寻找有向图的强连通分量</a>，这里只讲解Tarjan算法如何在拓扑排序中使用。</p>

<ol>
  <li>
    <p>Tarjan是用来查找强连通分量的，而一个节点的强连通分量是多个节点组成强连通分量的特殊情况，所以TSort中如果算法中找到有多个节点的强连通分量时就会抛出 <code class="highlighter-rouge">Cyclic</code> 这个错误，表示存在环图，不符合拓扑结构。而只有一个节点的强连通分量根据进入栈中后进先出的规则，可以做到按依赖排序的先后顺序出来。</p>
  </li>
  <li>
    <p>该算法是会有三个数据结构，一个是dnf数组，初始化时按照访问节点顺序加1，用来存储访问节点的顺序的，其中的值表示节点的位置。另外一个是low数组，初始值和dnf中的值一样，这个数组是用来存储子节点不通过父节点访问到的祖父节点的最小时间戳是多少，这里的时间戳可以理解为low中的数值。</p>
  </li>
  <li>
    <p>在算法中判断该节点是不是强连通分量，是不是应该出栈是通过判断dnf和low对应的节点是否一样来判断的，如果一样了，表示这个节点不能回到祖先节点，说明该节点不在一个多节点的强连通分量重，则这个节点是单独的一个强连通分量，如果不相等，说明这个节点可以回到祖先节点，那这个节点肯定在多个节点的强连通分量上，这是就不满足拓扑结构了。下面介绍的实现 TSort的就是通过这种方式去实现的。</p>
  </li>
</ol>

<h4 id="tsort-源码解析">TSort 源码解析</h4>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>def TSort.tsort_each(each_node, each_child) # :yields: node
  return to_enum(__method__, each_node, each_child) unless block_given?

  TSort.each_strongly_connected_component(each_node, each_child) {|component|
    if component.size == 1 # 判断强连通分量是否有多个节点，如果有多个则不满足拓扑结构
      yield component.first
    else
      raise Cyclic.new("topological sort failed: #{component.inspect}")
    end
  }
end
</code></pre></div></div>

<p>这里的调用 <code class="highlighter-rouge">each_strongly_connected_component</code> 方法加的block就是为了判断强连通分量中的节点是否满足只有一个的情况，如果有多个就不满足拓扑图了，会抛出错误。</p>

<h5 id="求各个节点的最强连通分量"><a name="block-source1">求各个节点的最强连通分量</a></h5>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>def TSort.each_strongly_connected_component(each_node, each_child) # :yields: nodes
  return to_enum(__method__, each_node, each_child) unless block_given?

  id_map = {} # 表示点的位置，为了避免重复调用节点去求强连通分量
  stack = []
  each_node.call {|node|
    unless id_map.include? node   # 如果已经存在那个节点，表示节点的关联关系已经被求过了，不需要进一步求了
      TSort.each_strongly_connected_component_from(node, each_child, id_map, stack) {|c|
        yield c
      }
    end
  }
  nil
end
</code></pre></div></div>

<p>这个方法主要是把每个节点作为block的参数去调用，由于一个拓扑图是有前有后的，说明肯定有根节点存在，但是在表示的映射的数据对结构中，不能确保第一次用的节点就是根节点，也有可能是最后个节点，所以需要遍历这些节点去求到他们的强连通图。</p>

<h5 id="求节点的最强连通分量"><a name="block-source2">求节点的最强连通分量</a></h5>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>def TSort.each_strongly_connected_component_from(node, each_child, id_map={}, stack=[]) # :yields: nodes
  return to_enum(__method__, node, each_child, id_map, stack) unless block_given?

  minimum_id = node_id = id_map[node] = id_map.size # node_id 是元素的位置，minimum_id 是low数组中对应的值
  stack_length = stack.length
  stack &lt;&lt; node

  each_child.call(node) {|child|
    if id_map.include? child # 表示遇到已经访问过的节点
      child_id = id_map[child]
      minimum_id = child_id if child_id &amp;&amp; child_id &lt; minimum_id # child_id 不为空表示没有出栈且没有被置为nil
    else # 这是遍历子节点
      sub_minimum_id =
        TSort.each_strongly_connected_component_from(child, each_child, id_map, stack) {|c|
          yield c
        }
      minimum_id = sub_minimum_id if sub_minimum_id &lt; minimum_id
    end
  }

  if node_id == minimum_id # 如果这两个值相等，表示栈里的数据都是一个强连通分量，则把栈里的数据都退出来，这些都是一个强连通分量来的。
    component = stack.slice!(stack_length .. -1)
    component.each {|n| id_map[n] = nil}
    yield component
  end

  minimum_id
end
</code></pre></div></div>

<p>拓扑排序的实现主要是这个方法，用了递归去遍历各个节点，然后逐个加上标识，然后判断是否满足退栈的条件，如果dnf和low中对应的值不相等，说明栈里的点是在一个环里，然后一直回退，直到遇到两个值相等的点，两个值相等的点是环中的根节点，这时就把栈里的数值按顺序退出去就行了。退出的这些数值就是一个强连通分量。如有这种关系的图 <code class="highlighter-rouge">graph = { B: [:A], A: [:D], C: [:B], D: [:C] }</code> 这其实是一个环状图，从点B开始作为node执行each_child后面的block，递归到C点，这时回到B，B是已经访问过的节点，说明是C的祖先节点或有共同的祖先的节点，由于B节点的low值不为nil，而且小于C，所以C的low值会变。一直会退到先前的B节点，这时B点的dnf和low值相等，所以是根节点，这时栈里的多个节点是一个强连通分量，这时就不满足拓扑结构了，就会抛出错误。</p>

<h4 id="ref">Ref:</h4>
<ul>
  <li><a href="http://blog.miskcoo.com/2016/07/tarjan-algorithm-strongly-connected-components">Tarjan算法寻找有向图的强连通分量</a></li>
  <li><a href="https://github.com/ruby/ruby/blob/trunk/lib/tsort.rb">tsrot source code</a></li>
  <li><a href="https://www.klausrubrecht.com/rubys-tsort-explained/">RUBY’S TSORT EXPLAINED</a></li>
  <li><a href="https://www.cnblogs.com/nullzx/p/7968110.html">Tarjan算法：求解图的割点与桥（割边）</a></li>
</ul>

	  ]]></description>
	</item>

	<item>
	  <title>Rails中的一些辅助技巧</title>
	  <link>//rails-helper</link>
	  <author></author>
	  <pubDate>2018-06-15T18:18:00+08:00</pubDate>
	  <guid>//rails-helper</guid>
	  <description><![CDATA[
	     <p>Rails helper作为页面标签的辅助生成器，其中加入了很多奇技淫巧，有时让人觉得像是个黑魔法，像有些浏览器不支持的action，为安全生成的校验token那些都是helper中生成的。很大程度的方便了我们的开发，之前也只是停留在使用的阶段，没有进一步探索过，现在有空总结如下。</p>

<h3 id="input-radio-type">input radio type</h3>

<h4 id="html中">Html中</h4>

<ul>
  <li>如果没有设置value属性，提交到后台时会提交默认的on值过去</li>
  <li>有value属性，没有设置值，则会当做空的字符串提交到后台</li>
</ul>

<h4 id="rails-helper中">Rails Helper中</h4>

<p>如果用的是 <code class="highlighter-rouge">radio_button</code> 那个helper，调用栈如下：</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code># ~/.rvm/gems/ruby-2.3.1/gems/actionview-4.2.7.1/lib/action_view/helpers/tags/radio_button.rb
def render
  ...
  tag("input", options)
end

# ~/.rvm/gems/ruby-2.3.1/gems/actionview-4.2.7.1/lib/action_view/helpers/tag_helper.rb
def tag(name, options = nil, open = false, escape = true)
  "&lt;#{name}#{tag_options(options, escape) if options}#{open ? "&gt;" : " /&gt;"}".html_safe
end

def tag_options(options, escape = true)
  ...
  options.each_pair do |key, value|
    ...
    elsif !value.nil?    # 如果value为空，则不把那个属性加入元素中
      output &lt;&lt; sep
      output &lt;&lt; tag_option(key, value, escape)
    end
  end
  output unless output.empty?
end
</code></pre></div></div>

<p>如果设置一个标签的值是nil的时候，那个属性会被忽略，不会被generate出来，所以如果value设置为nil时提交到后台默认的是on值，这是检索时就可能会出现问题。</p>

<p>checked属性的设置如下:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>def render
  ...
  options["checked"] = "checked" if input_checked?(object, options)
  ...
end

# /.rvm/gems/ruby-2.3.1/gems/actionview-4.2.7.1/lib/action_view/helpers/tags/checkable.rb
def input_checked?(object, options)
  if options.has_key?("checked")
    checked = options.delete "checked"
    checked == true || checked == "checked"
  else
    checked?(value(object)) # 用对象调用方法求的值比较当前值，看是否相等来决定是否要设置为checked
  end
end

# ~/.rvm/gems/ruby-2.3.1/gems/actionview-4.2.7.1/lib/action_view/helpers/tags/base.rb
# 对象调用方法求得的值
def value(object)
  object.public_send @method_name if object
end

# ~/.rvm/gems/ruby-2.3.1/gems/actionview-4.2.7.1/lib/action_view/helpers/tags/radio_button.rb
def checked?(value)
  value.to_s == @tag_value.to_s
end
</code></pre></div></div>

<p>如果标签中设置了checked属性，则看改属性是否设置为true或checked，如果不是，则在解析出来的标签中不设置那个属性，如果没有这个属性，则根据对象调用方法后的值和当前的值进行比较，看是否相等来设置checked的值。</p>

<h3 id="input-checkbox-type">input checkbox type</h3>

<h4 id="html中-1">Html中</h4>

<ul>
  <li>使用方式和radio_button差不多，但是有一点就是checkbox是多选的</li>
  <li>提交的时候不会提交没有选的checkbox的值，如果有相同的name值，则会全部提交到后台</li>
</ul>

<h4 id="rails-helper中-1">Rails Helper中</h4>

<p>checkbox类型经常用的一种方式是表示boolean值，但是checkbox有种特性，如果checkbox没有提交，则不会提交到后台，这样就会有个问题，如果只为true了，现在要改为false，虽然把checkbox取消了，但是由于没有提交到后台，所以不会置为false。现在rails中的helper是在check_box那个helper里自动生成另外一个hidden input，name值和checkbox的一样，如果checkbox不提交，则只会提交隐藏的input，如果勾选了，则提交checkbox的值了。</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code># ~/code/mingyou-web/app/views/admin/products/_form.html.erb
def hidden_field_for_checkbox(options)
	@unchecked_value ? tag("input", options.slice("name", "disabled", "form").merge!("type" =&gt; "hidden", "value" =&gt; @unchecked_value)) : "".html_safe
end
</code></pre></div></div>

<h3 id="对于保存boolean值的处理">对于保存BOOLEAN值的处理</h3>

<h4 id="html-中">Html 中</h4>

<p>value都是字符串的形式提交到后台</p>

<h4 id="rails中">Rails中</h4>

<p>false, 0, “0”, “f”, “F”, “false”, “FALSE”, “off”, “OFF” 都是false，其它都是true</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code># ~/.rvm/gems/ruby-2.5.3/gems/activemodel-5.2.2/lib/active_model/type/boolean.rb
class Boolean &lt; Value
  FALSE_VALUES = [false, 0, "0", "f", "F", "false", "FALSE", "off", "OFF"].to_set

  def type # :nodoc:
    :boolean
  end

  private

  def cast_value(value)
     if value == ""
       nil
     else
       !FALSE_VALUES.include?(value)
     end
  end
end
</code></pre></div></div>

	  ]]></description>
	</item>


</channel>
</rss>
